{
   "courseTitle":{
      "ru":"Полный курс Python",
      "en":"Complete Python Course"
   },
   "language":"Python",
   "iconUrl":"[https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Python\\_logo\\_and\\_wordmark.svg/2560px-Python\\_logo\\_and\\_wordmark.svg.png](https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Python_logo_and_wordmark.svg/2560px-Python_logo_and_wordmark.svg.png)",
   "description":{
      "ru":"Python — язык программирования общего назначения высокого уровня, ориентированный на читаемость кода. Он используется во многих областях, включая веб-разработку, анализ данных, науку о данных и автоматизацию. Python постоянно входит в число самых популярных языков программирования. Этот курс предназначен для начинающих и опытных программистов и охватывает темы от основ синтаксиса до продвинутых возможностей языка, включая современные фичи Python 3.10+.\n\nКаждый урок включает подробное изложение теории, примеры кода, тестовые вопросы для самопроверки и задания для практики.",
      "en":"Python is a high-level, general-purpose programming language whose design emphasizes code readability. It is widely used in many fields, including web development, data analysis, scientific computing, and automation. Python consistently ranks as one of the most popular programming languages. This course is designed for both beginners and experienced programmers and covers topics from basic syntax to advanced language features, including modern Python 3.10+ features.\n\nEach lesson includes a detailed theoretical explanation, practical code examples, quiz questions for self-check, and tasks for practice."
   },
   "topics":"\\"[
      {
         "titleRu":"Введение в Python",
         "titleEn":"Introduction to Python",
         "descriptionRu":"Python — это интерпретируемый язык программирования высокого уровня с динамической типизацией. Он был создан Гвидо ван Россумом и впервые выпущен в 1991 году. Python известен своим понятным синтаксисом и читаемым кодом. В Python отступы используются для разделения блоков кода, что делает программы более структурированными. Традиционной ""первой программой"" является вывод сообщения на экран. В Python для этого используется функция print (например, `print(\"Hello, World!\")`).",
         "descriptionEn":"Python is an interpreted, high-level programming language with dynamic typing. It was created by Guido van Rossum and first released in 1991. Python is known for its clear syntax and readable code. In Python, indentation is used to delimit code blocks, which makes programs well-structured. A traditional ""first program"" is to display a message on the screen. In Python, this is done with the print function (for example, `print(\"Hello, World!\")`).",
         "codeExamples":"\\"[
            "print(""Hello",
            "World!"")"
         ],
         "quiz":"\\"[
            {
               "questionRu":"Что выведет команда print(2 + 3)?",
               "questionEn":"What will be printed by print(2 + 3)?",
               "optionsRu":"\\"[
                  "5",
                  "2+3",
                  "23",
                  "Ошибка"
               ],
               "optionsEn":"\\"[
                  "5",
                  "2+3",
                  "23",
                  "Error"
               ],
               "correctOption":0
            }
         ],
         "task":{
            "taskRu":"Напишите программу, которая выводит на экран «Hello, World!».",
            "taskEn":"Write a program that prints 'Hello, World!' on the screen."
         }
      },
      {
         "titleRu":"Переменные и типы данных",
         "titleEn":"Variables and Data Types",
         "descriptionRu":"В Python переменная создаётся при первом присваивании и не требует явного объявления типа. Python динамически типизирован, то есть переменную можно переопределить значением другого типа во время выполнения. Основные встроенные типы: целые числа (int), числа с плавающей точкой (float), булевы значения (bool – True/False), строки (str) и специальное значение None (отсутствие значения). Переменные именуются буквами, цифрами и подчёркиванием и не могут начинаться с цифры.",
         "descriptionEn":"In Python, a variable is created when it is first assigned and does not require an explicit type declaration. Python is dynamically typed, meaning a variable can be reassigned to a value of a different type at runtime. Basic built-in types include integers (int), floating-point numbers (float), booleans (bool – True/False), strings (str), and the special value None (denoting no value). Variable names can include letters, digits, and underscores, but cannot start with a digit.",
         "codeExamples":"\\"[
            "a = 10\nb = 3.14\nprint(a, b)"
         ],
         "quiz":"\\"[
            {
               "questionRu":"Что означает, что Python — язык с динамической типизацией?",
               "questionEn":"What does it mean that Python is dynamically typed?",
               "optionsRu":"\\"[
                  "Тип переменной может меняться во время выполнения",
                  "Необходимо объявлять тип заранее",
                  "Переменные доступны только внутри функций",
                  "Python компилируется в машинный код"
               ],
               "optionsEn":"\\"[
                  "A variable’s type can change at runtime",
                  "You must declare variable types before use",
                  "Variables are only available inside functions",
                  "Python compiles to machine code"
               ],
               "correctOption":0
            }
         ],
         "task":{
            "taskRu":"Напишите программу, которая создаёт две переменные a и b с значениями 10 и 3.14, и выводит их на экран.",
            "taskEn":"Write a program that creates two variables a=10 and b=3.14, and prints them."
         }
      },
      {
         "titleRu":"Управляющие конструкции: условия и циклы",
         "titleEn":"Control Flow: Conditions and Loops",
         "descriptionRu":"Для ветвлений в Python используется if-оператор. Структура: `if условие: ... elif другое: ... else: ...`. Для циклов есть for и while. Цикл for перебирает элементы последовательности или диапазона (`for i in range(5):` переберёт 0–4). Цикл while повторяется, пока условие истинно. Внутри циклов можно использовать `break` (выход из цикла) и `continue` (переход к следующей итерации).",
         "descriptionEn":"Python uses the if statement for branching. The structure is: `if condition: ... elif other: ... else: ...`. For loops, Python has for and while. The for loop iterates over elements of a sequence or range (e.g. `for i in range(5):` iterates 0–4). The while loop repeats as long as a condition is true. Inside loops, you can use `break` to exit and `continue` to skip to the next iteration.",
         "codeExamples":"\\"[
            "for i in range(1, 6):\n    print(i)"
         ],
         "quiz":"\\"[
            {
               "questionRu":"Каким образом выйти из цикла досрочно?",
               "questionEn":"Which keyword exits a loop immediately?",
               "optionsRu":"\\"[
                  "break",
                  "continue",
                  "exit",
                  "return"
               ],
               "optionsEn":"\\"[
                  "break",
                  "continue",
                  "exit",
                  "return"
               ],
               "correctOption":0
            }
         ],
         "task":{
            "taskRu":"Напишите программу, которая с помощью цикла for выводит числа от 1 до 5.",
            "taskEn":"Write a program that uses a for loop to print the numbers from 1 to 5."
         }
      },
      {
         "titleRu":"Функции и модули",
         "titleEn":"Functions and Modules",
         "descriptionRu":"Функции группируют повторяющийся код. Определяются с помощью `def`, например: `def add(a, b):`. Функция может принимать параметры и возвращать значение через `return`. Модуль — это файл с кодом (.py). Чтобы использовать модуль, нужно его импортировать: `import math` или `from math import sqrt`. После импорта доступны функции и переменные модуля. Стандартная библиотека Python содержит множество готовых модулей, а сторонние можно установить через pip.",
         "descriptionEn":"Functions group reusable code. They are defined with `def`, for example: `def add(a, b):`. A function can take parameters and return a value using `return`. A module is a code file (.py). To use a module, you import it: `import math` or `from math import sqrt`. After importing, you can use the module’s functions and variables. Python’s standard library contains many built-in modules, and third-party ones can be installed via pip.",
         "codeExamples":"\\"[
            "def add(a, b):\n    return a + b\nprint(add(3, 4))"
         ],
         "quiz":"\\"[
            {
               "questionRu":"Как объявить функцию в Python?",
               "questionEn":"Which keyword is used to define a function in Python?",
               "optionsRu":"\\"[
                  "def",
                  "function",
                  "fun",
                  "lambda"
               ],
               "optionsEn":"\\"[
                  "def",
                  "function",
                  "fun",
                  "lambda"
               ],
               "correctOption":0
            }
         ],
         "task":{
            "taskRu":"Напишите функцию, которая принимает два числа и возвращает их сумму.",
            "taskEn":"Write a function that takes two numbers and returns their sum."
         }
      },
      {
         "titleRu":"Структуры данных: списки, кортежи, множества, словари",
         "titleEn":"Data Structures: Lists, Tuples, Sets, Dictionaries",
         "descriptionRu":"Список (list) — это упорядоченная изменяемая коллекция. Создаётся в квадратных скобках: `numbers = [1, 2, 3]`. Элементы списка доступны по индексу и могут меняться (`numbers[0] = 10`). Кортеж (tuple) похож на список, но неизменяем: `coords = (10, 20)`. Множество (set) — неупорядоченная коллекция уникальных элементов: `s = {1, 2, 2}` даст `{1, 2}`. Словарь (dict) — это набор пар «ключ-значение»: `person = {'name': 'Alice', 'age': 30}`. Доступ к значению по ключу: `person['name']` вернёт 'Alice'.",
         "descriptionEn":"A list is an ordered, mutable collection. It is defined with square brackets: `numbers = [1, 2, 3]`. List elements are accessed by index and can be modified (`numbers[0] = 10`). A tuple is like a list but immutable: `coords = (10, 20)`. A set is an unordered collection of unique elements: e.g. `s = {1, 2, 2}` yields `{1, 2}`. A dictionary is a set of key-value pairs: `person = {'name': 'Alice', 'age': 30}`. You access a value by its key: `person['name']` returns 'Alice'.",
         "codeExamples":"\\"[
            "numbers = \\[1, 2, 3]\nprint(numbers\\[0])  # выводит 1"
         ],
         "quiz":"\\"[
            {
               "questionRu":"Что будет результатом выражения {1, 1, 2}?",
               "questionEn":"What is the result of the expression {1, 1, 2}?",
               "optionsRu":"\\"[
                  "{1, 1, 2}",
                  "{1, 2}",
                  "{2}",
                  "Ошибка"
               ],
               "optionsEn":"\\"[
                  "{1, 1, 2}",
                  "{1, 2}",
                  "{2}",
                  "Error"
               ],
               "correctOption":1
            }
         ],
         "task":{
            "taskRu":"Напишите программу, которая объединяет два списка \\[1, 2] и \\[3, 4] в один список.",
            "taskEn":"Write a program that merges the two lists \\[1, 2] and \\[3, 4] into one list."
         }
      },
      {
         "titleRu":"Строки и текстовые данные",
         "titleEn":"Strings and Text Data",
         "descriptionRu":"Строка (str) — это последовательность символов. Она создаётся в кавычках: 'hello' или ""world"". Для многострочных строк используют тройные кавычки. Строки неизменяемы. С ними можно выполнять операции: конкатенация с +, повторение с *, индексация и срезы (например, s\\[1:3]). У строк много методов: .upper(), .lower(), .strip(), .split(), .replace() и др. Для форматированного вывода часто используют f-строки: например, `f\"Name: {name}, Age: {age}\"`.",
         "descriptionEn":"A string (str) is a sequence of characters. It is created with quotes: 'hello' or ""world"". Triple quotes are used for multi-line strings. Strings are immutable. You can perform operations like concatenation with +, repetition with *, indexing and slicing (for example, s\\[1:3]). Strings have many methods like .upper(), .lower(), .strip(), .split(), .replace(), etc. For formatted output, f-strings are often used: e.g. `f\"Name: {name}, Age: {age}\"`.",
         "codeExamples":"\\"[
            "s = ""Hello""\nprint(s.upper())  # HELLO"
         ],
         "quiz":"\\"[
            {
               "questionRu":"Что вернёт метод 'hello'.upper()?",
               "questionEn":"What does 'hello'.upper() return?",
               "optionsRu":"\\"[
                  "HELLO",
                  "hello",
                  "Ошибка",
                  "None"
               ],
               "optionsEn":"\\"[
                  "HELLO",
                  "hello",
                  "Error",
                  "None"
               ],
               "correctOption":0
            }
         ],
         "task":{
            "taskRu":"Напишите программу, которая запрашивает у пользователя строку и выводит её в верхнем регистре.",
            "taskEn":"Write a program that asks the user for a string and prints it in uppercase."
         }
      },
      {
         "titleRu":"Файловый ввод-вывод",
         "titleEn":"File Input and Output",
         "descriptionRu":"Для работы с файлами используется функция open(). Она принимает имя файла и режим ('r' – чтение, 'w' – запись, 'a' – добавление) и возвращает объект файла. Например, `f = open('data.txt', 'r')` откроет файл для чтения. У файла можно вызвать методы read(), readline(), readlines() для чтения или write() для записи текста. После работы файл нужно закрыть с помощью f.close(), или использовать with:\nwith open('file.txt', 'w') as f:\n    f.write('Hello')\nПри выходе из блока with файл закроется автоматически.",
         "descriptionEn":"The built-in open() function is used for file operations. It takes a filename and a mode ('r' for read, 'w' for write, 'a' for append) and returns a file object. For example, `f = open('data.txt', 'r')` opens the file for reading. You can then use methods like read(), readline(), readlines() to read data or write() to write text. After work, the file should be closed with f.close(), or you can use a with block:\nwith open('file.txt', 'w') as f:\n    f.write('Hello')\nWhen exiting the with block, the file is closed automatically.",
         "codeExamples":"\\"[
            "with open('example.txt', 'w') as f:\n    f.write('Hello!')"
         ],
         "quiz":"\\"[
            {
               "questionRu":"Какой режим открытия используется для перезаписи файла?",
               "questionEn":"Which mode opens a file for writing (overwriting)?",
               "optionsRu":"\\"[
                  "'w'",
                  "'r'",
                  "'a'",
                  "'x'"
               ],
               "optionsEn":"\\"[
                  "'w'",
                  "'r'",
                  "'a'",
                  "'x'"
               ],
               "correctOption":0
            }
         ],
         "task":{
            "taskRu":"Напишите программу, которая создаёт файл example.txt и записывает в него строку 'Привет!'.",
            "taskEn":"Write a program that creates a file example.txt and writes the string 'Hello!' into it."
         }
      },
      {
         "titleRu":"Обработка ошибок и исключения",
         "titleEn":"Error Handling and Exceptions",
         "descriptionRu":"Во время выполнения программы могут возникать исключения (ошибки). Чтобы их обработать, используют try-except:\ntry:  # код\nexcept ValueError:  # обработка ошибки\n    ...\nМожно указывать тип исключения. Есть также опциональные блоки else (выполняется, если ошибок не было) и finally (выполняется всегда). Чтобы сгенерировать исключение вручную, используют raise. У Python есть множество встроенных исключений: ValueError, TypeError, KeyError и др.",
         "descriptionEn":"During program execution, exceptions (errors) can occur. To handle them, you use try-except:\ntry:  # code\nexcept ValueError:  # error handling\n    ...\nYou can specify the exception type. There are also optional else (runs if no error) and finally (runs always) blocks. To raise an exception manually, use raise. Python has many built-in exception types, such as ValueError, TypeError, KeyError, etc.",
         "codeExamples":"\\"[
            "try:\n    x = int(input(""Enter a number":"))\nexcept ValueError:\n    print(""That""s not a number!\")\"
],
\"quiz\": \\[
{
\"questionRu\": \"Какое ключевое слово используется для генерации исключения вручную?\",
\"questionEn\": \"Which keyword is used to raise an exception manually?\",
\"optionsRu\": \\[\"raise\", \"throw\", \"except\", \"try\"],
\"optionsEn\": \\[\"raise\", \"throw\", \"except\", \"try\"],
\"correctOption\": 0
}
],
\"task\": {
\"taskRu\": \"Напишите программу, которая запрашивает у пользователя число и обрабатывает ошибку, если введено не число.\",
\"taskEn\": \"Write a program that asks the user for a number and handles the error if the input is not a number.\"
}
},
{
\"titleRu\": \"Объектно-ориентированное программирование (ООП)\",
\"titleEn\": \"Object-Oriented Programming (OOP)\",
\"descriptionRu\": \"ООП позволяет моделировать данные и поведение через объекты и классы. Класс объявляется ключевым словом class: `class Person:`. Внутри класса определяются методы и атрибуты. Метод **init**(self,...) вызывается при создании объекта и инициализирует его поля. Параметр self ссылается на текущий объект. Создание объекта: `p = Person()`. Python поддерживает наследование: например, `class Student(Person):` унаследует методы и атрибуты от класса Person.\",
\"descriptionEn\": \"OOP allows modeling data and behavior through objects and classes. A class is declared with the class keyword, for example: `class Person:`. Inside the class, you define methods and attributes. The **init**(self,...) method is called when an object is created and initializes its fields. The parameter self refers to the current object. You create an object with `p = Person()`. Python supports inheritance: e.g., `class Student(Person):` inherits methods and attributes from Person.\",
\"codeExamples\": \\[
\"class Rectangle:\n    def **init**(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width \\* self.height\n\nr = Rectangle(3, 4)\nprint(r.area())  # 12\"
],
\"quiz\": \\[
{
\"questionRu\": \"Какое ключевое слово используется для объявления класса?\",
\"questionEn\": \"What keyword is used to declare a class in Python?\",
\"optionsRu\": \\[\"class\", \"def\", \"object\", \"struct\"],
\"optionsEn\": \\[\"class\", \"def\", \"object\", \"struct\"],
\"correctOption\": 0
}
],
\"task\": {
\"taskRu\": \"Напишите класс Rectangle, который хранит ширину и высоту, и имеет метод area(), возвращающий площадь.\",
\"taskEn\": \"Write a class Rectangle that stores width and height, and has a method area() that returns the area.\"
}
},
{
\"titleRu\": \"Декораторы и генераторы\",
\"titleEn\": \"Decorators and Generators\",
\"descriptionRu\": \"Генераторы — это функции, которые возвращают последовательность значений по мере запроса с помощью ключевого слова yield. При каждом вызове генератора выполнение приостанавливается, а затем возобновляется при следующем запросе. Это удобно для перебора большого набора данных без хранения всего списка в памяти. Декораторы — это функции, которые принимают другую функцию и возвращают новую, расширяя поведение оригинальной. Они отмечаются символом @ перед определением функции. Пример: `@decorator def func(): ...`. При вызове декорированной функции сначала выполнится код из декоратора.\",
\"descriptionEn\": \"Generators are functions that yield values one at a time using the yield keyword. Each time the generator is called, its execution is paused and then resumed on the next call. This is useful for iterating over large datasets without holding the entire list in memory. Decorators are functions that take another function and return a new one, extending the original behavior. They are marked with the @ symbol above the function definition. For example: `@decorator def func(): ...`. When calling the decorated function, the decorator’s code runs first.\",
\"codeExamples\": \\[
\"def countdown(n):\n    while n > 0:\n        yield n\n        n -= 1\n\nfor num in countdown(3):\n    print(num)\"
],
\"quiz\": \\[
{
\"questionRu\": \"Какое ключевое слово используется в генераторе для выдачи значения?\",
\"questionEn\": \"Which keyword is used in a generator to yield a value?\",
\"optionsRu\": \\[\"yield\", \"return\", \"give\", \"next\"],
\"optionsEn\": \\[\"yield\", \"return\", \"give\", \"next\"],
\"correctOption\": 0
}
],
\"task\": {
\"taskRu\": \"Напишите генератор, который по одному возвращает элементы списка \\[1, 2, 3].\",
\"taskEn\": \"Write a generator that yields elements of the list \\[1, 2, 3] one by one.\"
}
},
{
\"titleRu\": \"Лямбда-функции и списковые генераторы\",
\"titleEn\": \"Lambda Functions and Comprehensions\",
\"descriptionRu\": \"Lambda-функция — это небольшая анонимная функция, определяемая ключевым словом lambda. Она может принимать аргументы, но содержит только одно выражение, которое и возвращается. Например, `lambda x, y: x + y` задаёт функцию, возвращающую сумму. Лямбда-функции часто используются в качестве коротких функций для map() или filter(). Списковые генераторы позволяют создавать списки компактно: `[x*x for x in iterable if условие]`. Например, `[x*x for x in range(1,6) if x%2==0]` создаст список \\[4, 16].\",
\"descriptionEn\": \"A lambda function is a small anonymous function defined with the lambda keyword. It can take arguments but contains only one expression, whose result is returned. For example, `lambda x, y: x + y` defines a function returning the sum. Lambdas are often used as short functions for map() or filter(). List comprehensions allow creating lists compactly: `[x*x for x in iterable if condition]`. For example, `[x*x for x in range(1,6) if x%2==0]` creates the list \\[4, 16].\",
\"codeExamples\": \\[
\"squares = \\[x*x for x in range(1, 6) if x % 2 == 0]\nprint(squares)  # \\[4, 16]\"
],
\"quiz\": \\[
{
\"questionRu\": \"Что вернёт выражение \\[x*2 for x in \\[1, 2, 3]]?\",
\"questionEn\": \"What does the expression \\[x\\*2 for x in \\[1, 2, 3]] return?\",
\"optionsRu\": \\[\"\\[2, 4, 6]\", \"\\[1, 2, 3, 1, 2, 3]\", \"\\[1, 4, 9]\", \"Ошибка\"],
\"optionsEn\": \\[\"\\[2, 4, 6]\", \"\\[1, 2, 3, 1, 2, 3]\", \"\\[1, 4, 9]\", \"Error\"],
\"correctOption\": 0
}
],
\"task\": {
\"taskRu\": \"Используя списковое выражение, создайте список квадратов чисел от 1 до 5.\",
\"taskEn\": \"Using a list comprehension, create a list of squares of the numbers from 1 to 5.\"
}
},
{
\"titleRu\": \"Менеджеры контекста\",
\"titleEn\": \"Context Managers\",
\"descriptionRu\": \"Менеджеры контекста позволяют автоматически управлять ресурсами с помощью оператора with. При входе в блок with вызывается метод **enter**, а при выходе (даже если произошла ошибка) вызывается **exit**. Чаще всего это используется для работы с файлами: `with open(""file.txt"", ""r"") as f: ...` гарантирует закрытие файла. Пользовательский менеджер контекста создаётся с помощью методов **enter**() и **exit**() в классе.\",
\"descriptionEn\": \"Context managers let you automatically manage resources using the with statement. When entering the with block, the **enter** method is called, and upon exiting (even if an error occurs) the **exit** method is called. This is commonly used with files: `with open(""file.txt"", ""r"") as f: ...` ensures the file is closed. A custom context manager can be created by defining **enter**() and **exit**() methods in a class.\",
\"codeExamples\": \\[
\"class MyContext:\n    def **enter**(self):\n        print(\"Entering\")\n    def **exit**(self, exc\\_type, exc\\_val, exc\\_tb):\n        print(\"Exiting\")\n\nwith MyContext():\n    print(\"Inside block\")\"
],
\"quiz\": \\[
{
\"questionRu\": \"Какой метод менеджера контекста вызывается при входе в блок with?\",
\"questionEn\": \"Which method of a context manager is called when entering a with block?\",
\"optionsRu\": \\[\"**enter**\", \"**exit**\", \"**init**\", \"**call**\"],
\"optionsEn\": \\[\"**enter**\", \"**exit**\", \"**init**\", \"**call**\"],
\"correctOption\": 0
}
],
\"task\": {
\"taskRu\": \"Напишите менеджер контекста (класс), который при входе в with-блок выводит ""Entering"", а при выходе ""Exiting"".\",
\"taskEn\": \"Write a context manager class that prints ""Entering"" when entering the with-block and ""Exiting"" when exiting.\"
}
},
{
\"titleRu\": \"Асинхронное программирование и многопоточность\",
\"titleEn\": \"Asynchronous and Concurrent Programming\",
\"descriptionRu\": \"Python поддерживает разные подходы к параллельному выполнению. Модуль threading позволяет создавать потоки, но из-за GIL (Global Interpreter Lock) одновременно выполняться может только один поток. Для параллельных вычислений существует модуль multiprocessing, создающий несколько процессов. Для асинхронного ввода-вывода есть библиотека asyncio: асинхронные функции объявляются с async def, а ожидание результатов выполняется с помощью await. Это помогает выполнять неблокирующие операции без создания большого числа потоков.\",
\"descriptionEn\": \"Python supports various approaches to parallel execution. The threading module allows multiple threads, but due to the GIL (Global Interpreter Lock) only one thread can execute Python bytecode at a time. For parallel CPU-bound tasks, there is the multiprocessing module, which creates separate processes. For asynchronous I/O, Python provides the asyncio library: asynchronous functions are declared with async def, and you use await to wait for results. This allows performing non-blocking operations without creating many threads.\",
\"codeExamples\": \\[
\"import asyncio\n\nasync def say\\_done():\n    await asyncio.sleep(1)\n    print(\"Done\")\n\nasyncio.run(say\\_done())\"
],
\"quiz\": \\[
{
\"questionRu\": \"Какое ключевое слово используется для объявления асинхронной функции?\",
\"questionEn\": \"Which keyword is used to define an asynchronous function?\",
\"optionsRu\": \\[\"async\", \"await\", \"thread\", \"future\"],
\"optionsEn\": \\[\"async\", \"await\", \"thread\", \"future\"],
\"correctOption\": 0
}
],
\"task\": {
\"taskRu\": \"Напишите асинхронную функцию, которая ждёт 1 секунду (используя asyncio.sleep) и выводит \"Done\".\",
\"taskEn\": \"Write an async function that waits 1 second (using asyncio.sleep) and then prints \"Done\".\"
}
},
{
\"titleRu\": \"Аннотации типов и дата-классы\",
\"titleEn\": \"Type Hints and Data Classes\",
\"descriptionRu\": \"В Python есть аннотации типов (type hints) для переменных и функций. Это помогает документировать код и использовать статическую проверку. Например: `def add(a: int, b: int) -> int:` означает, что функция принимает два целых числа и возвращает целое число. Для сложных типов (List, Optional и т.д.) используют модуль typing. Декоратор @dataclass (в Python 3.7+) автоматически генерирует методы **init**, **repr** и т.д. для класса на основе указанных полей. Пример:\n\\@dataclass\nclass Point:\n    x: int\n    y: int\n\",
\"descriptionEn\": \"Python has type annotations (type hints) for variables and functions. This helps document code and perform static checking. For example: `def add(a: int, b: int) -> int:` means the function takes two integers and returns an integer. For complex types (List, Optional, etc.), you use the typing module. The @dataclass decorator (in Python 3.7+) automatically generates **init**, **repr**, etc. for a class based on its declared fields. Example:\n\\@dataclass\nclass Point:\n    x: int\n    y: int\n\",
\"codeExamples\": \\[
\"from dataclasses import dataclass\n\n\\@dataclass\nclass Person:\n    name: str\n    age: int\n\np = Person(name=""Alice"", age=30)\nprint(p)\"
],
\"quiz\": \\[
{
\"questionRu\": \"Какой декоратор используется для создания data class?\",
\"questionEn\": \"Which decorator is used to create a dataclass?\",
\"optionsRu\": \\[\"@dataclass\", \"@model\", \"@schema\", \"@data\"],
\"optionsEn\": \\[\"@dataclass\", \"@model\", \"@schema\", \"@data\"],
\"correctOption\": 0
}
],
\"task\": {
\"taskRu\": \"Напишите @dataclass для класса Person с полями name (str) и age (int).\",
\"taskEn\": \"Declare a @dataclass for a class Person with fields name (str) and age (int).\"
}
},
{
\"titleRu\": \"Нововведения: сопоставление с образцом\",
\"titleEn\": \"New in Python: Pattern Matching\",
\"descriptionRu\": \"В Python 3.10 введён оператор match...case для структурного сопоставления. Это похоже на switch/case, но мощнее. Пример использования:\nmatch value:\n    case 1:\n        print(\"One\")\n    case 2:\n        print(\"Two\")\n    case \\_:\n        print(\"Other\")\n\nЗдесь case \\_ является шаблоном по умолчанию (wildcard). Сопоставление с образцом позволяет проще обрабатывать несколько условий в одном блоке.\",
\"descriptionEn\": \"Python 3.10 introduced the match...case statement for structural pattern matching. It is similar to switch/case but more powerful. Example usage:\nmatch value:\n    case 1:\n        print(\"One\")\n    case 2:\n        print(\"Two\")\n    case \\_:\n        print(\"Other\")\n\nHere, case \\_ is the default (wildcard) pattern. Pattern matching allows simpler handling of multiple conditions in one block.\",
\"codeExamples\": \\[
\"n = 2\nmatch n:\n    case 1:\n        print(\"One\")\n    case 2:\n        print(\"Two\")\n    case \\_:\n        print(\"Other\")\"
],
\"quiz\": \\[
{
\"questionRu\": \"Что означает шаблон \\_ в конструкции match-case?\",
\"questionEn\": \"What does the \\_ pattern mean in a match-case statement?\",
\"optionsRu\": \\[\"Совпадает с любым значением (wildcard)\", \"Совпадает только с None\", \"Ошибка\", \"Эквивалент else\"],
\"optionsEn\": \\[\"Matches any value (wildcard)\", \"Matches only None\", \"Error\", \"Equivalent to else\"],
\"correctOption\": 0
}
],
\"task\": {
\"taskRu\": \"Напишите пример с использованием match-case для переменной n: если n равно 1, вывести ""One""; если 2 — ""Two""; иначе ""Other"".\",
\"taskEn\": \"Write an example using match-case for variable n: if n equals 1, print ""One""; if 2, print ""Two""; otherwise print ""Other""'.\"
}
}
]
}"
