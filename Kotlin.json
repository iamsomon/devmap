{
  "courseTitle": {
    "ru": "Курс по Kotlin",
    "en": "Kotlin Programming Course"
  },
  "language": "Kotlin",
  "iconUrl": "https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/kotlin/kotlin-original.svg",
"tags": [
  "android-development",
  "mobile-development",
  "multiplatform",
  "server-side",
  "web-backend",
  "coroutines",
  "jvm"
],
  "description": {
    "ru": "Этот курс по Kotlin охватывает основы языка и продвинутые возможности — синтаксис, типы данных, функции, ООП, коллекции, лямбды, null-безопасность, корутины и применение в Android.",
    "en": "This Kotlin course covers the language from basics to advanced features — syntax, data types, functions, OOP, collections, lambdas, null safety, coroutines and Android usage."
  },
  "topics": [
    {
      "titleRu": "Основы синтаксиса",
      "titleEn": "Basic Syntax",
      "descriptionRu": "Kotlin — современный язык на JVM, разработанный JetBrains. Программа состоит из файлов с функцией main(), переменных val и var и выводом типа. Каждый оператор заканчивается точкой с запятой по желанию, а блоки входят в фигурные скобки.",
      "descriptionEn": "Kotlin is a modern JVM language by JetBrains. A program consists of files with a main() function, variables declared with val and var, and type inference. Statements may end with semicolons, and code blocks use curly braces.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "fun main() {\n    println(\"Hello, World!\")\n}",
          "commentLanguage": "ru",
          "comment": "Самая простая программа, выводящая строку."
        }
      ],
      "quiz": [
        {
          "questionRu": "Какие ключевые слова используются для объявления переменных в Kotlin?",
          "questionEn": "Which keywords declare variables in Kotlin?",
          "options": [
            "let и var",
            "val и var",
            "var и var",
            "val и let"
          ],
          "correctAnswerIndex": 1
        }
      ],
      "task": {
        "titleRu": "Hello Kotlin",
        "titleEn": "Hello Kotlin",
        "instructionRu": "Напишите программу, которая выводит \"Привет, Kotlin!\".",
        "instructionEn": "Write a program that prints \"Hello, Kotlin!\".",
        "hintRu": "Используйте fun main() и println.",
        "hintEn": "Use fun main() and println.",
        "expectedResultRu": "Привет, Kotlin!",
        "expectedResultEn": "Hello, Kotlin!",
        "solutionCode": "fun main() {\n    println(\"Hello, Kotlin!\")\n}"
      }
    },
    {
      "titleRu": "Типы данных",
      "titleEn": "Data Types",
      "descriptionRu": "Kotlin поддерживает Int, Long, Float, Double, Boolean, Char и String. Тип выводится автоматически. Any — супертип всех non-null, а nullable типы обозначаются ?.",
      "descriptionEn": "Kotlin supports Int, Long, Float, Double, Boolean, Char and String. Types are inferred. Any is the supertype of all non-null types, and nullable types use ?.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "fun main() {\n    val x: Int = 10\n    val y = 3.14  // Double\n    val flag: Boolean = true\n    println(\"x=$x, y=$y, flag=$flag\")\n}",
          "commentLanguage": "ru",
          "comment": "Пример разных типов и вывода."
        }
      ],
      "quiz": [
        {
          "questionRu": "Какой тип используется для логических значений?",
          "questionEn": "What type is used for boolean values?",
          "options": [
            "Bool",
            "Boolean",
            "BoolVal",
            "Boolen"
          ],
          "correctAnswerIndex": 1
        }
      ],
      "task": {
        "titleRu": "Сумма чисел",
        "titleEn": "Sum of Numbers",
        "instructionRu": "Объявите три val переменные Int, найдите их сумму и выведите.",
        "instructionEn": "Declare three Int vals, compute their sum and print it.",
        "hintRu": "Используйте оператор +.",
        "hintEn": "Use the + operator.",
        "expectedResultRu": "35",
        "expectedResultEn": "35",
        "solutionCode": "fun main() {\n    val a = 10\n    val b = 20\n    val c = 5\n    println(a + b + c)\n}"
      }
    },
    {
      "titleRu": "Управляющие конструкции",
      "titleEn": "Control Structures",
      "descriptionRu": "Kotlin имеет if/else, when, for, while и do..while. if и when — выражения, возвращающие значение. for работает с диапазонами и коллекциями.",
      "descriptionEn": "Kotlin has if/else, when, for, while and do..while. if and when are expressions returning values. for works over ranges and collections.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "fun main() {\n    val n = 5\n    if (n % 2 == 0) println(\"Even\") else println(\"Odd\")\n\n    when (n) {\n        in 1..3 -> println(\"Small\")\n        else -> println(\"Large\")\n    }\n\n    for (i in 1..3) println(i)\n}",
          "commentLanguage": "ru",
          "comment": "if, when и for примеры."
        }
      ],
      "quiz": [
        {
          "questionRu": "Какой оператор в Kotlin заменяет switch?",
          "questionEn": "Which Kotlin construct replaces switch?",
          "options": [
            "select",
            "when",
            "match",
            "case"
          ],
          "correctAnswerIndex": 1
        }
      ],
      "task": {
        "titleRu": "Чётные числа",
        "titleEn": "Even Numbers",
        "instructionRu": "Выведите чётные числа от 1 до 10 с помощью for.",
        "instructionEn": "Print even numbers from 1 to 10 using for.",
        "hintRu": "Проверяйте i % 2 == 0.",
        "hintEn": "Check i % 2 == 0.",
        "expectedResultRu": "2 4 6 8 10",
        "expectedResultEn": "2 4 6 8 10",
        "solutionCode": "fun main() {\n    for (i in 1..10) {\n        if (i % 2 == 0) println(i)\n    }\n}"
      }
    },
    {
      "titleRu": "Функции",
      "titleEn": "Functions",
      "descriptionRu": "Функции объявляются через fun, могут иметь параметры с типами и возвращаемое значение. Поддерживаются default-аргументы и named arguments.",
      "descriptionEn": "Functions are declared with fun, have typed parameters and return types. Default arguments and named arguments are supported.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "fun greet(name: String = \"Guest\"): String = \"Hello, $name!\"\n\nfun main() {\n    println(greet(\"Alice\"))\n    println(greet())\n}",
          "commentLanguage": "ru",
          "comment": "Expression-body функция и default-параметр."
        }
      ],
      "quiz": [
        {
          "questionRu": "Какой тип возвращает функция без return?",
          "questionEn": "What is the return type of a function with no return?",
          "options": [
            "Void",
            "Unit",
            "Nothing",
            "Null"
          ],
          "correctAnswerIndex": 1
        }
      ],
      "task": {
        "titleRu": "Функция max",
        "titleEn": "Max Function",
        "instructionRu": "Напишите функцию max(a,b): Int, возвращающую большее из двух чисел.",
        "instructionEn": "Write function max(a,b): Int that returns the larger of two numbers.",
        "hintRu": "Используйте if (a>b) a else b.",
        "hintEn": "Use if (a>b) a else b.",
        "expectedResultRu": "10",
        "expectedResultEn": "10",
        "solutionCode": "fun max(a: Int, b: Int): Int = if (a > b) a else b\n\nfun main() {\n    println(max(10,5))\n}"
      }
    },
    {
      "titleRu": "Классы и объекты",
      "titleEn": "Classes and Objects",
      "descriptionRu": "Классы объявляются через class. Primary и secondary конструкторы. По умолчанию final, для наследования нужен open. data class генерирует equals, hashCode и toString.",
      "descriptionEn": "Classes are declared with class. Primary and secondary constructors. Classes are final by default, use open for inheritance. data class generates equals, hashCode, toString.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "data class Person(val name: String, var age: Int)\n\nopen class Animal(val name: String) {\n    open fun sound() = println(\"Sound\")\n}\n\nclass Dog(name: String): Animal(name) {\n    override fun sound() = println(\"Woof\")\n}\n\nfun main() {\n    println(Person(\"John\",25))\n    Dog(\"Rex\").sound()\n}",
          "commentLanguage": "ru",
          "comment": "data class и наследование."
        }
      ],
      "quiz": [
        {
          "questionRu": "Какой ключевое слово позволяет наследование класса?",
          "questionEn": "Which keyword allows class inheritance?",
          "options": [
            "final",
            "open",
            "override",
            "abstract"
          ],
          "correctAnswerIndex": 1
        }
      ],
      "task": {
        "titleRu": "Book data class",
        "titleEn": "Book Data Class",
        "instructionRu": "Создайте data class Book(title, author) и выведите объект.",
        "instructionEn": "Create data class Book(title, author) and print an instance.",
        "hintRu": "Используйте data class Book(val title:String, val author:String).",
        "hintEn": "Use data class Book(val title:String, val author:String).",
        "expectedResultRu": "Book(title=1984, author=Orwell)",
        "expectedResultEn": "Book(title=1984, author=Orwell)",
        "solutionCode": "data class Book(val title: String, val author: String)\n\nfun main() {\n    println(Book(\"1984\",\"Orwell\"))\n}"
      }
    },
    {
      "titleRu": "Интерфейсы",
      "titleEn": "Interfaces",
      "descriptionRu": "Интерфейсы через interface. Могут содержать абстрактные и default-методы. Реализуются через ':'.",
      "descriptionEn": "Interfaces use interface keyword. Can contain abstract and default methods. Implemented with ':'.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "interface Flyable { fun fly() }\n\nclass Bird: Flyable { override fun fly() = println(\"Bird flies\") }\n\nfun main() { Bird().fly() }",
          "commentLanguage": "ru",
          "comment": "Интерфейс и его реализация."
        }
      ],
      "quiz": [
        {
          "questionRu": "Могут ли интерфейсы содержать реализацию метода?",
          "questionEn": "Can interfaces contain method implementations?",
          "options": [
            "Нет",
            "Да, default-методы",
            "Только статические",
            "Только абстрактные"
          ],
          "correctAnswerIndex": 1
        }
      ],
      "task": {
        "titleRu": "Drawable интерфейс",
        "titleEn": "Drawable Interface",
        "instructionRu": "Создайте интерфейс Drawable с draw() и два класса, реализующие его.",
        "instructionEn": "Create interface Drawable with draw() and two implementing classes.",
        "hintRu": "Используйте interface Drawable и override fun draw().",
        "hintEn": "Use interface Drawable and override fun draw().",
        "expectedResultRu": "Circle\nSquare",
        "expectedResultEn": "Circle\nSquare",
        "solutionCode": "interface Drawable { fun draw() }\n\nclass Circle: Drawable { override fun draw() = println(\"Circle\") }\nclass Square: Drawable { override fun draw() = println(\"Square\") }\n\nfun main() {\n    Circle().draw()\n    Square().draw()\n}"
      }
    },
    {
      "titleRu": "Расширения",
      "titleEn": "Extensions",
      "descriptionRu": "Extension-функции добавляют методы к классам без изменения их кода. Объявляются как fun Type.newFun() { ... }.",
      "descriptionEn": "Extension functions add methods to classes without modifying them. Declared as fun Type.newFun() { ... }.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "fun String.reverse(): String = this.reversed()\n\nfun main() { println(\"abc\".reverse()) }",
          "commentLanguage": "ru",
          "comment": "Расширение для String."
        }
      ],
      "quiz": [
        {
          "questionRu": "Изменяют ли extension-функции класс байт-кодом?",
          "questionEn": "Do extension functions modify the class bytecode?",
          "options": [
            "Да",
            "Нет, они статические",
            "Только в runtime",
            "Только в debug"
          ],
          "correctAnswerIndex": 1
        }
      ],
      "task": {
        "titleRu": "sumElements расширение",
        "titleEn": "sumElements Extension",
        "instructionRu": "Напишите расширение List<Int>.sumElements(), возвращающее сумму элементов.",
        "instructionEn": "Write List<Int>.sumElements() extension returning sum of elements.",
        "hintRu": "Используйте fold или цикл.",
        "hintEn": "Use fold or a loop.",
        "expectedResultRu": "10",
        "expectedResultEn": "10",
        "solutionCode": "fun List<Int>.sumElements(): Int = this.fold(0) { acc, v -> acc + v }\n\nfun main() { println(listOf(1,2,3,4).sumElements()) }"
      }
    },
    {
      "titleRu": "Коллекции",
      "titleEn": "Collections",
      "descriptionRu": "List, Set, Map и их mutable-версии. Поддерживаются map, filter, reduce, forEach и др.",
      "descriptionEn": "List, Set, Map and their mutable versions. Supports map, filter, reduce, forEach etc.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "fun main() {\n    val nums = listOf(1,2,3,4)\n    println(nums.filter { it % 2 == 0 })\n    println(nums.map { it * it })\n}",
          "commentLanguage": "ru",
          "comment": "filter и map пример."
        }
      ],
      "quiz": [
        {
          "questionRu": "Какая коллекция неизменяемая?",
          "questionEn": "Which collection is immutable?",
          "options": [
            "List",
            "MutableList",
            "ArrayList",
            "HashMap"
          ],
          "correctAnswerIndex": 0
        }
      ],
      "task": {
        "titleRu": "Квадраты чётных",
        "titleEn": "Squares of Evens",
        "instructionRu": "Получите квадраты чётных элементов списка через filter и map.",
        "instructionEn": "Obtain squares of even elements using filter and map.",
        "hintRu": "Используйте listOf(…) и цепочку операций.",
        "hintEn": "Use listOf(…) and chain operations.",
        "expectedResultRu": "[4, 16]",
        "expectedResultEn": "[4, 16]",
        "solutionCode": "fun main() {\n    val result = listOf(1,2,3,4,5)\n        .filter { it % 2 == 0 }\n        .map { it * it }\n    println(result)\n}"
      }
    },
    {
      "titleRu": "Лямбда-функции",
      "titleEn": "Lambda Functions",
      "descriptionRu": "Лямбды — анонимные функции в формате {params->body}. Если один параметр — it. Поддерживаются closures.",
      "descriptionEn": "Lambdas are anonymous functions {params->body}. For one parameter use it. Closures are supported.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "fun main() {\n    val nums = listOf(1,2,3)\n    println(nums.filter { it > 1 })\n}",
          "commentLanguage": "ru",
          "comment": "filter с лямбдой."
        }
      ],
      "quiz": [
        {
          "questionRu": "Как называется неявный параметр в лямбде?",
          "questionEn": "What is the implicit parameter name in a lambda?",
          "options": [
            "it",
            "this",
            "self",
            "param"
          ],
          "correctAnswerIndex": 0
        }
      ],
      "task": {
        "titleRu": "Сортировка по длине",
        "titleEn": "Sort by Length",
        "instructionRu": "Отсортируйте список строк по длине с помощью sortedBy { it.length }.",
        "instructionEn": "Sort a list of strings by length using sortedBy { it.length }.",
        "hintRu": "Используйте sortedBy.",
        "hintEn": "Use sortedBy.",
        "expectedResultRu": "[\"kiwi\",\"pear\",\"apple\",\"banana\"]",
        "expectedResultEn": "[\"kiwi\",\"pear\",\"apple\",\"banana\"]",
        "solutionCode": "fun main() {\n    val words = listOf(\"apple\",\"pear\",\"banana\",\"kiwi\")\n    println(words.sortedBy { it.length })\n}"
      }
    },
    {
      "titleRu": "Null-безопасность",
      "titleEn": "Null Safety",
      "descriptionRu": "Nullable типы обозначаются ?, safe-call ?. и Элвис ?: позволяют безопасно работать с null. !! бросает исключение.",
      "descriptionEn": "Nullable types use ?, safe-call ?. and Elvis ?: operate safely with null. !! throws an exception.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "fun main() {\n    val s: String? = null\n    println(s?.length ?: 0)\n}",
          "commentLanguage": "ru",
          "comment": "Safe-call и Elvis."
        }
      ],
      "quiz": [
        {
          "questionRu": "Что делает оператор !! в Kotlin?",
          "questionEn": "What does the !! operator do in Kotlin?",
          "options": [
            "Безопасный вызов",
            "Elvis оператор",
            "Принудительное утверждение non-null",
            "Проверка типа"
          ],
          "correctAnswerIndex": 2
        }
      ],
      "task": {
        "titleRu": "safeLength функция",
        "titleEn": "safeLength Function",
        "instructionRu": "Напишите функцию safeLength(str: String?): Int возвращающую длину или 0, используя ?:.",
        "instructionEn": "Write function safeLength(str: String?): Int returning length or 0 using ??:",
        "hintRu": "Используйте str?.length ?: 0.",
        "hintEn": "Use str?.length ?: 0.",
        "expectedResultRu": "5 и 0",
        "expectedResultEn": "5 and 0",
        "solutionCode": "fun safeLength(str: String?): Int = str?.length ?: 0\n\nfun main() {\n    println(safeLength(\"Hello\"))\n    println(safeLength(null))\n}"
      }
    },
    {
      "titleRu": "Корутины",
      "titleEn": "Coroutines",
      "descriptionRu": "Корутины из kotlinx.coroutines дают неблокирующий асинхронный код. Используют runBlocking, launch, async и delay.",
      "descriptionEn": "Coroutines from kotlinx.coroutines enable non-blocking async code. Use runBlocking, launch, async, and delay.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(100)\n        println(\"World\")\n    }\n    println(\"Hello\")\n}",
          "commentLanguage": "ru",
          "comment": "Пример runBlocking и launch."
        }
      ],
      "quiz": [
        {
          "questionRu": "Какой builder блокирует до завершения корутин?",
          "questionEn": "Which builder blocks until coroutines complete?",
          "options": [
            "launch",
            "async",
            "runBlocking",
            "delay"
          ],
          "correctAnswerIndex": 2
        }
      ],
      "task": {
        "titleRu": "Задержка и вывод",
        "titleEn": "Delay and Print",
        "instructionRu": "Запустите корутину с delay(500) и выведите \"Kotlin Coroutines\".",
        "instructionEn": "Launch a coroutine with delay(500) and print \"Kotlin Coroutines\".",
        "hintRu": "Используйте runBlocking и launch.",
        "hintEn": "Use runBlocking and launch.",
        "expectedResultRu": "Kotlin Coroutines",
        "expectedResultEn": "Kotlin Coroutines",
        "solutionCode": "import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    launch {\n        delay(500)\n        println(\"Kotlin Coroutines\")\n    }\n}"
      }
    },
    {
      "titleRu": "Kotlin для Android",
      "titleEn": "Kotlin for Android",
      "descriptionRu": "Kotlin официально поддерживается Android. Используйте Android KTX, AppCompatActivity и корутины для фоновых задач.",
      "descriptionEn": "Kotlin is officially supported on Android. Use Android KTX, AppCompatActivity and coroutines for background tasks.",
      "codeExamples": [
        {
          "language": "kotlin",
          "code": "import android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity: AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    }\n}",
          "commentLanguage": "ru",
          "comment": "Пример Activity на Kotlin."
        }
      ],
      "quiz": [
        {
          "questionRu": "Что такое Android KTX?",
          "questionEn": "What is Android KTX?",
          "options": [
            "Тестовый фреймворк",
            "Kotlin-расширения для Android API",
            "Сборщик",
            "UI toolkit"
          ],
          "correctAnswerIndex": 1
        }
      ],
      "task": {
        "titleRu": "Создание Activity",
        "titleEn": "Create an Activity",
        "instructionRu": "Создайте Android Activity на Kotlin, устанавливающую layout в onCreate.",
        "instructionEn": "Create an Android Activity in Kotlin that sets the layout in onCreate.",
        "hintRu": "Наследуйтесь от AppCompatActivity и вызовите setContentView.",
        "hintEn": "Extend AppCompatActivity and call setContentView.",
        "expectedResultRu": "Экран приложения отображает activity_main",
        "expectedResultEn": "The app screen shows activity_main",
        "solutionCode": "import android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity: AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    }\n}"
      }
    }
  ]
}
